module CarryLookAheadAdder (
 
input [3:0] A_in, B_in, input Cin_in,
output [3:0] Sum_out, output Cout_out
);
wire [3:0] Carry_intermediate;
assign Carry_intermediate[0] = Cin_in;
assign Carry_intermediate[1] = (A_in[0] & B_in[0]) | ((A_in[0] ^ B_in[0]) & Carry_intermediate[0]); assign Carry_intermediate[2] = (A_in[1] & B_in[1]) | ((A_in[1] ^ B_in[1]) & ((A_in[0] & B_in[0]) | ((A_in[0] ^ B_in[0]) & Carry_intermediate[0])));
assign Carry_intermediate[3] = (A_in[2] & B_in[2]) | ((A_in[2] ^ B_in[2]) & ((A_in[1] & B_in[1]) | ((A_in[1] ^ B_in[1]) & ((A_in[0] & B_in[0]) | ((A_in[0] ^ B_in[0]) & Carry_intermediate[0]))))); assign Cout_out = (A_in[3] & B_in[3]) | ((A_in[3] ^ B_in[3]) & ((A_in[2] & B_in[2]) | ((A_in[2] ^
B_in[2]) & ((A_in[1] & B_in[1]) | ((A_in[1] ^ B_in[1]) & ((A_in[0] & B_in[0]) | ((A_in[0] ^ B_in[0]) & Carry_intermediate[0])))))));
assign Sum_out = A_in ^ B_in ^ Carry_intermediate;
endmodule
